/* Common variables and functions. */

/* Fail unknown. */
prederror: true;

/* Assert that equal(e, 0) reduces to true. */
prove(e) :=
  if is(equal(e, 0)) then true else error("FALSE");

/* Test whether z is pure real. */
pure_real(z) :=
  z - conjugate(z);

/* Test whether z is pure imaginary. */
pure_imag(z) :=
  z + conjugate(z);


/* Points and lines. */

/* Test whether X, Y, Z are collinear. */
collinear(x, y, z) :=
  parallel(x, y, y, z);

/* Compute the intersection of XY and ZW. */
intersection(x, y, z, w) :=
  ((conjugate(x) * y - x * conjugate(y)) * (z - w) -
   (x - y) * (conjugate(z) * w - z * conjugate(w))) /
  ((conjugate(x) - conjugate(y)) * (z - w) -
   (x - y) * (conjugate(z) - conjugate(w)));

/* Rotate X about Y by Î¸. */
rotate(x, y, theta) :=
  (x - y) * %e^(%i * theta) + y;

/* Test whether XY and ZW are parallel. */
parallel(x, y, z, w) :=
  pure_real((x - y) / (z - w));

/* Test whether XY and ZW are perpendicular. */
perpendicular(x, y, z, w) :=
  pure_imag((x - y) / (z - w));

/* Compute the reflection of Z over XY. */
reflection(x, y, z) :=
  ((x - y) * conjugate(z) + conjugate(x) * y - x * conjugate(y)) /
  (conjugate(x) - conjugate(y));


/* Triangles. */

/* Compute the signed area of triangle XYZ. */
area(x, y, z) :=
  %i/4 * determinant(matrix([x, conjugate(x), 1],
                            [y, conjugate(y), 1],
                            [z, conjugate(z), 1]));

/* Compute the centroid of triangle XYZ. */
centroid(x, y, z) :=
  (x + y + z) / 3;

/* Compute the circumcenter of triangle XYZ. */
circumcenter(x, y, z) :=
  determinant(matrix([x, x * conjugate(x), 1],
                     [y, y * conjugate(y), 1],
                     [z, z * conjugate(z), 1])) /
  determinant(matrix([x, conjugate(x), 1],
                     [y, conjugate(y), 1],
                     [z, conjugate(z), 1]));

/* Test whether X, Y, Z, W are concyclic. */
concyclic(x, y, z, w) :=
  pure_real(((z - x) / (z - y)) / ((w - x) / (w - y)));

/* Test whether triangle XYZ is equilateral. */
equilateral(x, y, z) :=
  (x^2 + y^2 + z^2) - (x * y + y * z + z * x);
